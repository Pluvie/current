#!/bin/bash

echo -e \
"/**
 * This file is autogenerated by the script \`bin/test\`.
 * Do not edit manually. */\n" > def/test/cases.h

# Does a first compilation pass returing only the preprocessor output.
# It will save this output in the temporary `tmp/test_cases.txt` file.
bin/compile test -E | grep            \
  --color=never                       \
  --only-matching                     \
  -P "test_case_.*? \("               \
    > tmp/test_cases.txt              &&
                                      \
# The preprocessor output is converted once to generate the test cases
# function signatures.
cat tmp/test_cases.txt |              \
  sed -e 's/test_/void test_/g' |     \
  sed -e 's/(/();/g'                  \
    >> def/test/cases.h               &&
                                      \
# Then the global variable with all test cases is created. It is an
# array of function pointers, each one pointing to each test case.
echo -e "\nvoid (*cases[])(void) = {" \
  >> def/test/cases.h                 &&
                                      \
cat tmp/test_cases.txt |              \
  sed -e 's/test_/  test_/g' |        \
  sed -e 's/ (/,/g'                   \
    >> def/test/cases.h               &&
                                      \
echo -e "};" >> def/test/cases.h      &&
                                      \
# At this point the file `def/test/cases.h` contains all test cases
# function definitions and also the global test cases function
# pointers array. Everything is good for final compilation.
bin/compile test -o exe/test          &&
valgrind                              \
  --track-origins=yes                 \
  --leak-check=full                   \
  --show-leak-kinds=all               \
  exe/test
echo
